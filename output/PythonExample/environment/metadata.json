{
  "files": [
    {
      "path": "req_004.py",
      "language": "python",
      "size": 1520,
      "lines_of_code": 38,
      "classes": [],
      "functions": [
        {
          "name": "divide_numbers",
          "parameters": [
            "dividend: Union[int, float]",
            "divisor: Union[int, float]"
          ],
          "start_line": 4,
          "end_line": 28,
          "visibility": "public",
          "docstring": "\n    Divide two numbers and return the result.\n    \n    Args:\n        dividend (Union[int, float]): The number to be divided (numerator).\n        divisor (Union[int, float]): The number to divide by (denominator).\n    \n    Returns:\n        Union[float, None]: The result of the division if successful, or None if an error occurs.\n        \n    Raises:\n        ValueError: If the divisor is zero, since division by zero is undefined.\n    ",
          "return_type": "Union[float, None]"
        },
        {
          "name": "main",
          "parameters": [],
          "start_line": 30,
          "end_line": 41,
          "visibility": "public",
          "docstring": "\n    Main function to demonstrate the division functionality.\n    "
        }
      ],
      "imports": [
        "import sys",
        "from typing import Union"
      ],
      "constants": {},
      "comments": [],
      "docstring": null
    },
    {
      "path": "req_001.py",
      "language": "python",
      "size": 1707,
      "lines_of_code": 42,
      "classes": [],
      "functions": [
        {
          "name": "add_numbers",
          "parameters": [
            "a: Union[int, float]",
            "b: Union[int, float]"
          ],
          "start_line": 4,
          "end_line": 25,
          "visibility": "public",
          "docstring": "\n    Adds two numbers and returns the result.\n\n    Args:\n        a (Union[int, float]): The first number to add.\n        b (Union[int, float]): The second number to add.\n\n    Returns:\n        Union[int, float]: The sum of the two numbers.\n\n    Raises:\n        ValueError: If the inputs are not numbers.\n    ",
          "return_type": "Union[int, float]"
        },
        {
          "name": "main",
          "parameters": [],
          "start_line": 27,
          "end_line": 51,
          "visibility": "public",
          "docstring": "\n    Main function to demonstrate the usage of add_numbers function.\n    Handles user input and provides a simple calculator interface.\n    ",
          "return_type": "None"
        }
      ],
      "imports": [
        "import sys",
        "from typing import Union"
      ],
      "constants": {},
      "comments": [
        "Ensure inputs are numbers",
        "Convert inputs to numbers",
        "Perform addition"
      ],
      "docstring": null
    },
    {
      "path": "req_002.py",
      "language": "python",
      "size": 1352,
      "lines_of_code": 34,
      "classes": [],
      "functions": [
        {
          "name": "subtract_numbers",
          "parameters": [
            "a: float",
            "b: float"
          ],
          "start_line": 4,
          "end_line": 21,
          "visibility": "public",
          "docstring": "\n    Subtract two numbers and return the result.\n\n    Args:\n        a (float): The first number (minuend).\n        b (float): The second number (subtrahend).\n\n    Returns:\n        float: The result of subtracting b from a.\n\n    Raises:\n        ValueError: If the inputs are not numbers.\n    ",
          "return_type": "float"
        },
        {
          "name": "main",
          "parameters": [],
          "start_line": 24,
          "end_line": 45,
          "visibility": "public",
          "docstring": "\n    Main function to provide a user-friendly interface for subtracting two numbers.\n\n    Prompts the user to input two numbers, performs the subtraction,\n    and displays the result. Handles invalid inputs gracefully.\n    "
        }
      ],
      "imports": [
        "import sys"
      ],
      "constants": {},
      "comments": [
        "Prompt the user for inputs",
        "Perform subtraction",
        "Display the result"
      ],
      "docstring": null
    },
    {
      "path": "req_003.py",
      "language": "python",
      "size": 1376,
      "lines_of_code": 30,
      "classes": [],
      "functions": [
        {
          "name": "multiply_numbers",
          "parameters": [
            "a: Union[int, float]",
            "b: Union[int, float]"
          ],
          "start_line": 4,
          "end_line": 30,
          "visibility": "public",
          "docstring": "\n    Multiplies two numbers and returns the result.\n\n    Args:\n        a (Union[int, float]): The first number.\n        b (Union[int, float]): The second number.\n\n    Returns:\n        Union[int, float]: The result of multiplying the two numbers.\n\n    Raises:\n        ValueError: If either input is not a number.\n    ",
          "return_type": "Union[int, float]"
        }
      ],
      "imports": [
        "import sys",
        "from typing import Union"
      ],
      "constants": {},
      "comments": [
        "Validate that the inputs are numeric",
        "Perform multiplication",
        "Catch and log unexpected exceptions",
        "Example usage (can be removed or commented out for production code)"
      ],
      "docstring": null
    },
    {
      "path": "tests/test_req_001.py",
      "language": "python",
      "size": 3519,
      "lines_of_code": 76,
      "classes": [],
      "functions": [
        {
          "name": "test_add_numbers_valid",
          "parameters": [
            "a",
            "b",
            "expected"
          ],
          "start_line": 20,
          "end_line": 22,
          "visibility": "public",
          "docstring": "Test add_numbers with valid inputs.",
          "decorators": [
            "pytest.mark.parametrize('a, b, expected', [(1, 2, 3), (1.5, 2.5, 4.0), (1, 2.5, 3.5), (0, 0, 0), (-1, -2, -3), (-1.5, -2.5, -4.0), (10000000000.0, 10000000000.0, 20000000000.0), (1e-10, 1e-10, 2e-10)])"
          ]
        },
        {
          "name": "test_add_numbers_invalid",
          "parameters": [
            "a",
            "b",
            "expected_exception",
            "expected_message"
          ],
          "start_line": 36,
          "end_line": 40,
          "visibility": "public",
          "docstring": "Test add_numbers with invalid inputs.",
          "decorators": [
            "pytest.mark.parametrize('a, b, expected_exception, expected_message', [('1', 2, ValueError, 'Invalid input types'), (1, '2', ValueError, 'Invalid input types'), (None, 2, ValueError, 'Invalid input types'), (1, None, ValueError, 'Invalid input types'), ([1], 2, ValueError, 'Invalid input types'), (1, {2}, ValueError, 'Invalid input types')])"
          ]
        },
        {
          "name": "test_main_valid_inputs",
          "parameters": [],
          "start_line": 44,
          "end_line": 54,
          "visibility": "public",
          "docstring": "Test main function with valid inputs."
        },
        {
          "name": "test_main_invalid_inputs",
          "parameters": [],
          "start_line": 57,
          "end_line": 67,
          "visibility": "public",
          "docstring": "Test main function with invalid inputs."
        },
        {
          "name": "test_main_unexpected_error",
          "parameters": [],
          "start_line": 70,
          "end_line": 80,
          "visibility": "public",
          "docstring": "Test main function with unexpected error."
        },
        {
          "name": "test_main_edge_case_zero",
          "parameters": [],
          "start_line": 83,
          "end_line": 93,
          "visibility": "public",
          "docstring": "Test main function with edge case inputs (zero)."
        }
      ],
      "imports": [
        "import pytest",
        "from io import StringIO",
        "from unittest.mock import patch",
        "from calculator import add_numbers",
        "from calculator import main"
      ],
      "constants": {},
      "comments": [
        "Test cases for add_numbers function",
        "Test cases for main function"
      ],
      "docstring": null
    },
    {
      "path": "tests/test_req_004.py",
      "language": "python",
      "size": 4509,
      "lines_of_code": 108,
      "classes": [],
      "functions": [
        {
          "name": "test_divide_numbers_valid_cases",
          "parameters": [
            "dividend",
            "divisor",
            "expected_result"
          ],
          "start_line": 19,
          "end_line": 24,
          "visibility": "public",
          "docstring": "\n    Test divide_numbers with valid inputs.\n    ",
          "decorators": [
            "pytest.mark.parametrize('dividend, divisor, expected_result', [(10, 2, 5.0), (10.0, 2.0, 5.0), (7, 3, 7 / 3), (-10, 2, -5.0), (10, -2, -5.0), (-10, -2, 5.0), (0, 5, 0.0), (5, 0.5, 10.0)])"
          ]
        },
        {
          "name": "test_divide_numbers_division_by_zero",
          "parameters": [
            "dividend",
            "divisor"
          ],
          "start_line": 34,
          "end_line": 39,
          "visibility": "public",
          "docstring": "\n    Test divide_numbers for division by zero.\n    ",
          "decorators": [
            "pytest.mark.parametrize('dividend, divisor', [(10, 0), (10.0, 0)])"
          ]
        },
        {
          "name": "test_divide_numbers_invalid_types",
          "parameters": [
            "dividend",
            "divisor"
          ],
          "start_line": 54,
          "end_line": 59,
          "visibility": "public",
          "docstring": "\n    Test divide_numbers with invalid input types.\n    ",
          "decorators": [
            "pytest.mark.parametrize('dividend, divisor', [('10', 2), (10, '2'), ('10', '2'), (None, 2), (10, None), ([], 2), (10, {})])"
          ]
        },
        {
          "name": "test_divide_numbers_error_messages",
          "parameters": [
            "capsys"
          ],
          "start_line": 62,
          "end_line": 74,
          "visibility": "public",
          "docstring": "\n    Test that appropriate error messages are printed to stderr.\n    "
        },
        {
          "name": "test_main_function_valid_input",
          "parameters": [
            "monkeypatch",
            "capsys"
          ],
          "start_line": 77,
          "end_line": 89,
          "visibility": "public",
          "docstring": "\n    Test the main function with valid inputs.\n    "
        },
        {
          "name": "test_main_function_invalid_input",
          "parameters": [
            "monkeypatch",
            "capsys"
          ],
          "start_line": 92,
          "end_line": 104,
          "visibility": "public",
          "docstring": "\n    Test the main function with invalid inputs.\n    "
        },
        {
          "name": "test_main_function_division_by_zero",
          "parameters": [
            "monkeypatch",
            "capsys"
          ],
          "start_line": 107,
          "end_line": 119,
          "visibility": "public",
          "docstring": "\n    Test the main function with division by zero.\n    "
        },
        {
          "name": "test_main_function_non_numeric_divisor",
          "parameters": [
            "monkeypatch",
            "capsys"
          ],
          "start_line": 122,
          "end_line": 134,
          "visibility": "public",
          "docstring": "\n    Test the main function with a non-numeric divisor.\n    "
        }
      ],
      "imports": [
        "import pytest",
        "from io import StringIO",
        "import sys",
        "from divide_module import divide_numbers",
        "from divide_module import main",
        "from divide_module import main",
        "from divide_module import main",
        "from divide_module import main"
      ],
      "constants": {},
      "comments": [
        "Test division by zero",
        "Test invalid input types"
      ],
      "docstring": null
    },
    {
      "path": "tests/test_req_003.py",
      "language": "python",
      "size": 3919,
      "lines_of_code": 67,
      "classes": [],
      "functions": [
        {
          "name": "test_multiply_numbers_valid_inputs",
          "parameters": [
            "a: Union[int, float]",
            "b: Union[int, float]",
            "expected: Union[int, float]"
          ],
          "start_line": 20,
          "end_line": 23,
          "visibility": "public",
          "docstring": "Test multiply_numbers with valid inputs.",
          "decorators": [
            "pytest.mark.parametrize('a, b, expected', [(2, 3, 6), (-2, 3, -6), (2.5, 4, 10.0), (0, 5, 0), (0, 0, 0), (1.5, 2.5, 3.75), (-1.5, -2.5, 3.75), (10000000000.0, 10000000000.0, 1e+20), (1e-10, 1e-10, 1e-20)])"
          ]
        },
        {
          "name": "test_multiply_numbers_invalid_inputs",
          "parameters": [
            "a",
            "b",
            "expected_exception",
            "expected_message"
          ],
          "start_line": 37,
          "end_line": 41,
          "visibility": "public",
          "docstring": "Test multiply_numbers with invalid inputs.",
          "decorators": [
            "pytest.mark.parametrize('a, b, expected_exception, expected_message', [('2', 3, ValueError, 'Invalid input types: str, int. Must be int or float.'), (2, '3', ValueError, 'Invalid input types: int, str. Must be int or float.'), (None, 3, ValueError, 'Invalid input types: NoneType, int. Must be int or float.'), (2, None, ValueError, 'Invalid input types: int, NoneType. Must be int or float.'), ([2], 3, ValueError, 'Invalid input types: list, int. Must be int or float.'), (2, {3}, ValueError, 'Invalid input types: int, set. Must be int or float.')])"
          ]
        },
        {
          "name": "test_multiply_numbers_edge_cases",
          "parameters": [],
          "start_line": 44,
          "end_line": 54,
          "visibility": "public",
          "docstring": "Test multiply_numbers with edge cases."
        },
        {
          "name": "test_multiply_numbers_unexpected_exception_handling",
          "parameters": [
            "monkeypatch"
          ],
          "start_line": 57,
          "end_line": 66,
          "visibility": "public",
          "docstring": "Test multiply_numbers for unexpected exceptions."
        },
        {
          "name": "mock_isinstance",
          "parameters": [
            "obj",
            "types"
          ],
          "start_line": 59,
          "end_line": 60,
          "visibility": "public"
        },
        {
          "name": "test_multiply_numbers_large_numbers",
          "parameters": [],
          "start_line": 69,
          "end_line": 74,
          "visibility": "public",
          "docstring": "Test multiply_numbers with very large numbers."
        },
        {
          "name": "test_multiply_numbers_small_numbers",
          "parameters": [],
          "start_line": 77,
          "end_line": 82,
          "visibility": "public",
          "docstring": "Test multiply_numbers with very small numbers."
        }
      ],
      "imports": [
        "import pytest",
        "from typing import Union",
        "from your_module_name import multiply_numbers"
      ],
      "constants": {},
      "comments": [
        "Test cases for normal scenarios",
        "Test cases for invalid inputs",
        "Test cases for edge cases",
        "Multiplying by infinity",
        "Multiplying by NaN",
        "Test cases for unexpected exceptions",
        "Test cases for large numbers",
        "Test cases for small numbers",
        "Run the tests"
      ],
      "docstring": null
    },
    {
      "path": "tests/test_req_002.py",
      "language": "python",
      "size": 3999,
      "lines_of_code": 68,
      "classes": [],
      "functions": [
        {
          "name": "test_subtract_numbers_normal_cases",
          "parameters": [],
          "start_line": 7,
          "end_line": 12,
          "visibility": "public"
        },
        {
          "name": "test_subtract_numbers_edge_cases",
          "parameters": [],
          "start_line": 14,
          "end_line": 21,
          "visibility": "public"
        },
        {
          "name": "test_subtract_numbers_invalid_inputs",
          "parameters": [],
          "start_line": 23,
          "end_line": 34,
          "visibility": "public"
        },
        {
          "name": "test_main_normal_case",
          "parameters": [],
          "start_line": 37,
          "end_line": 47,
          "visibility": "public"
        },
        {
          "name": "test_main_invalid_input",
          "parameters": [],
          "start_line": 49,
          "end_line": 58,
          "visibility": "public"
        },
        {
          "name": "test_main_unexpected_error",
          "parameters": [],
          "start_line": 60,
          "end_line": 64,
          "visibility": "public"
        },
        {
          "name": "test_main_edge_case_zero_subtraction",
          "parameters": [],
          "start_line": 66,
          "end_line": 76,
          "visibility": "public"
        },
        {
          "name": "test_main_negative_numbers",
          "parameters": [],
          "start_line": 78,
          "end_line": 88,
          "visibility": "public"
        }
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import patch",
        "from io import StringIO",
        "from subtraction_module import subtract_numbers",
        "from subtraction_module import main"
      ],
      "constants": {},
      "comments": [
        "Test cases for subtract_numbers function",
        "Test normal subtraction",
        "Test subtraction with very large numbers",
        "Test subtraction with very small numbers",
        "Test invalid inputs",
        "Test cases for main function",
        "Simulate user input and capture output",
        "Simulate invalid user input and capture output",
        "Simulate unexpected error (e.g., input function is mocked to raise an exception)",
        "Simulate user input for zero subtraction and capture output",
        "Simulate user input for negative numbers and capture output"
      ],
      "docstring": null
    }
  ],
  "languages": [
    "python"
  ],
  "language_summaries": {
    "python": {
      "file_count": 8,
      "total_lines": 463,
      "total_size": 21901,
      "provider": "PythonProvider"
    }
  },
  "project_info": {
    "source_path": "output/PythonExample/environment/generated_code_fixed",
    "total_files": 8,
    "main_language": "python",
    "project_type": "python",
    "generation_time": 0.010576009750366211,
    "generator_version": "2.0.0",
    "supported_languages": [
      "python",
      "javascript",
      "typescript",
      "java",
      "csharp",
      "cpp"
    ],
    "project_analysis": {
      "total_files": 8,
      "languages": [
        "python"
      ],
      "main_language": "python",
      "files_by_language": {
        "python": 8
      },
      "lines_by_language": {
        "python": 589
      },
      "project_type": "python"
    }
  }
}
{
  "files": [
    {
      "path": "test_req006.py",
      "language": "python",
      "size": 5004,
      "lines_of_code": 83,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 9,
          "end_line": 128,
          "methods": [
            {
              "name": "test_add_integers",
              "parameters": [
                "self"
              ],
              "start_line": 13,
              "end_line": 14,
              "visibility": "public"
            },
            {
              "name": "test_add_floats",
              "parameters": [
                "self"
              ],
              "start_line": 16,
              "end_line": 17,
              "visibility": "public"
            },
            {
              "name": "test_add_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 19,
              "end_line": 20,
              "visibility": "public"
            },
            {
              "name": "test_add_zero",
              "parameters": [
                "self"
              ],
              "start_line": 22,
              "end_line": 23,
              "visibility": "public"
            },
            {
              "name": "test_add_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 25,
              "end_line": 27,
              "visibility": "public"
            },
            {
              "name": "test_subtract_integers",
              "parameters": [
                "self"
              ],
              "start_line": 30,
              "end_line": 31,
              "visibility": "public"
            },
            {
              "name": "test_subtract_floats",
              "parameters": [
                "self"
              ],
              "start_line": 33,
              "end_line": 34,
              "visibility": "public"
            },
            {
              "name": "test_subtract_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 36,
              "end_line": 37,
              "visibility": "public"
            },
            {
              "name": "test_subtract_zero",
              "parameters": [
                "self"
              ],
              "start_line": 39,
              "end_line": 40,
              "visibility": "public"
            },
            {
              "name": "test_subtract_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 42,
              "end_line": 44,
              "visibility": "public"
            },
            {
              "name": "test_multiply_integers",
              "parameters": [
                "self"
              ],
              "start_line": 47,
              "end_line": 48,
              "visibility": "public"
            },
            {
              "name": "test_multiply_floats",
              "parameters": [
                "self"
              ],
              "start_line": 50,
              "end_line": 51,
              "visibility": "public"
            },
            {
              "name": "test_multiply_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 53,
              "end_line": 54,
              "visibility": "public"
            },
            {
              "name": "test_multiply_by_zero",
              "parameters": [
                "self"
              ],
              "start_line": 56,
              "end_line": 57,
              "visibility": "public"
            },
            {
              "name": "test_multiply_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 59,
              "end_line": 61,
              "visibility": "public"
            },
            {
              "name": "test_divide_integers",
              "parameters": [
                "self"
              ],
              "start_line": 64,
              "end_line": 65,
              "visibility": "public"
            },
            {
              "name": "test_divide_floats",
              "parameters": [
                "self"
              ],
              "start_line": 67,
              "end_line": 68,
              "visibility": "public"
            },
            {
              "name": "test_divide_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 70,
              "end_line": 71,
              "visibility": "public"
            },
            {
              "name": "test_divide_by_zero",
              "parameters": [
                "self"
              ],
              "start_line": 73,
              "end_line": 75,
              "visibility": "public"
            },
            {
              "name": "test_divide_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 77,
              "end_line": 79,
              "visibility": "public"
            },
            {
              "name": "test_add_and_multiply_by_two",
              "parameters": [
                "self"
              ],
              "start_line": 82,
              "end_line": 83,
              "visibility": "public"
            },
            {
              "name": "test_add_and_multiply_by_two_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 85,
              "end_line": 86,
              "visibility": "public"
            },
            {
              "name": "test_add_and_multiply_by_two_zero",
              "parameters": [
                "self"
              ],
              "start_line": 88,
              "end_line": 89,
              "visibility": "public"
            },
            {
              "name": "test_add_and_multiply_by_two_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 91,
              "end_line": 93,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_integers",
              "parameters": [
                "self"
              ],
              "start_line": 96,
              "end_line": 97,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_floats",
              "parameters": [
                "self"
              ],
              "start_line": 99,
              "end_line": 100,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_mixed",
              "parameters": [
                "self"
              ],
              "start_line": 102,
              "end_line": 103,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_empty",
              "parameters": [
                "self"
              ],
              "start_line": 105,
              "end_line": 106,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_negative_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 108,
              "end_line": 109,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_not_list",
              "parameters": [
                "self"
              ],
              "start_line": 111,
              "end_line": 113,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_non_numeric",
              "parameters": [
                "self"
              ],
              "start_line": 115,
              "end_line": 119,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_nested_list",
              "parameters": [
                "self"
              ],
              "start_line": 121,
              "end_line": 125,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_large_numbers",
              "parameters": [
                "self"
              ],
              "start_line": 127,
              "end_line": 128,
              "visibility": "public"
            }
          ],
          "visibility": "public",
          "docstring": "Test suite for the Calculator class."
        }
      ],
      "functions": [],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Here is the updated and comprehensive test suite for the `Calculator` class, ensuring all requirements are met:",
        "File: tests/test_calculator.py",
        "--- Tests for add() ---",
        "--- Tests for subtract() ---",
        "--- Tests for multiply() ---",
        "--- Tests for divide() ---",
        "--- Tests for add_and_multiply_by_two() ---",
        "--- Tests for sum_list() ---",
        "## Explanation of the Test Cases:",
        "1. **Normal Functionality**:",
        "- Tests for valid inputs (integers, floats, mixed types) for all methods.",
        "- Includes edge cases like zero and negative numbers.",
        "2. **Edge Cases**:",
        "- Tests for empty lists in `sum_list`.",
        "- Tests for large numbers in `sum_list`.",
        "- Tests for zero in arithmetic operations.",
        "3. **Error Conditions**:",
        "- Tests for invalid types (e.g., strings, nested lists).",
        "- Tests for division by zero.",
        "- Tests for non-list inputs in `sum_list`.",
        "4. **Setup**:",
        "- Proper imports are included.",
        "- Each test is isolated and uses `pytest.raises` to validate exceptions.",
        "This test suite ensures comprehensive coverage of the `Calculator` class functionality and input validation."
      ],
      "docstring": null
    },
    {
      "path": "test_req002.py",
      "language": "python",
      "size": 4621,
      "lines_of_code": 67,
      "classes": [],
      "functions": [
        {
          "name": "test_power_normal_cases",
          "parameters": [
            "base",
            "exponent",
            "expected"
          ],
          "start_line": 25,
          "end_line": 29,
          "visibility": "public",
          "decorators": [
            "pytest.mark.parametrize('base, exponent, expected', [(2, 3, 8), (5, 0, 1), (2, -2, 0.25), (-2, 3, -8), (-2, 2, 4), (10, 1, 10), (1, 100, 1), (0.5, 2, 0.25), (4, 0.5, 2)])"
          ]
        },
        {
          "name": "test_power_edge_cases",
          "parameters": [
            "base",
            "exponent",
            "expected"
          ],
          "start_line": 40,
          "end_line": 44,
          "visibility": "public",
          "decorators": [
            "pytest.mark.parametrize('base, exponent, expected', [(0, 0, 1), (0, 5, 0)])"
          ]
        },
        {
          "name": "test_power_error_conditions",
          "parameters": [
            "base",
            "exponent"
          ],
          "start_line": 55,
          "end_line": 65,
          "visibility": "public",
          "decorators": [
            "pytest.mark.parametrize('base, exponent', [(0, -1), (0, -5)])"
          ]
        },
        {
          "name": "test_power_large_numbers",
          "parameters": [
            "base",
            "exponent",
            "expected"
          ],
          "start_line": 76,
          "end_line": 80,
          "visibility": "public",
          "decorators": [
            "pytest.mark.parametrize('base, exponent, expected', [(10, 10, 10000000000.0), (2, 100, 1.2676506002282294e+30)])"
          ]
        },
        {
          "name": "test_power_fractional_exponents",
          "parameters": [
            "base",
            "exponent",
            "expected"
          ],
          "start_line": 92,
          "end_line": 96,
          "visibility": "public",
          "decorators": [
            "pytest.mark.parametrize('base, exponent, expected', [(9, 0.5, 3), (27, 1 / 3, 3), (16, 0.25, 2)])"
          ]
        }
      ],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator",
        "from code import power"
      ],
      "constants": {},
      "comments": [
        "Below is a comprehensive set of `pytest` test cases for the `power` function implemented in both `calculator/calculator.py` and `code.py`. The test cases cover normal functionality, edge cases, and error conditions.",
        "## Test File: `tests/test_power.py`",
        "Test cases for normal functionality",
        "Test Calculator.power",
        "Test standalone power function",
        "Test cases for edge cases",
        "Test Calculator.power",
        "Test standalone power function",
        "Test cases for error conditions",
        "Test Calculator.power",
        "Test standalone power function",
        "Test cases for large numbers",
        "Test Calculator.power",
        "Test standalone power function",
        "Test cases for fractional exponents",
        "Test Calculator.power",
        "Test standalone power function",
        "## Explanation of Test Cases",
        "1. **Normal Functionality**:",
        "- Tests common scenarios such as positive and negative bases, positive and negative exponents, fractional bases, and special cases like `base^0` and `base^1`.",
        "2. **Edge Cases**:",
        "- Covers edge cases like `0^0` (often defined as 1) and `0` raised to a positive power.",
        "3. **Error Conditions**:",
        "- Ensures that a `ValueError` is raised when the base is `0` and the exponent is negative, as this is mathematically undefined.",
        "4. **Large Numbers**:",
        "- Tests the function's ability to handle large bases and exponents without overflow or precision issues.",
        "5. **Fractional Exponents**:",
        "- Tests cases where the exponent is a fraction, such as square roots, cube roots, and other fractional powers.",
        "### Notes:",
        "- **`pytest.approx`**: Used for floating-point comparisons to handle precision issues.",
        "- **`pytest.mark.parametrize`**: Used to parameterize test cases for better readability and maintainability.",
        "- **Error Matching**: The `match` argument in `pytest.raises` ensures that the correct error message is raised.",
        "### Running the Tests",
        "To run the tests, execute the following command in the terminal:",
        "pytest tests/test_power.py"
      ],
      "docstring": null
    },
    {
      "path": "test_req003.py",
      "language": "python",
      "size": 5357,
      "lines_of_code": 82,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 9,
          "end_line": 106,
          "methods": [
            {
              "name": "test_calculate_percentage_valid",
              "parameters": [
                "self"
              ],
              "start_line": 15,
              "end_line": 23,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with valid inputs.\n        "
            },
            {
              "name": "test_calculate_percentage_small_values",
              "parameters": [
                "self"
              ],
              "start_line": 26,
              "end_line": 31,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with very small values.\n        "
            },
            {
              "name": "test_calculate_percentage_large_values",
              "parameters": [
                "self"
              ],
              "start_line": 33,
              "end_line": 38,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with very large values.\n        "
            },
            {
              "name": "test_calculate_percentage_negative_values",
              "parameters": [
                "self"
              ],
              "start_line": 40,
              "end_line": 46,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with negative values.\n        "
            },
            {
              "name": "test_calculate_percentage_zero_value",
              "parameters": [
                "self"
              ],
              "start_line": 48,
              "end_line": 53,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage when value is zero.\n        "
            },
            {
              "name": "test_calculate_percentage_zero_total",
              "parameters": [
                "self"
              ],
              "start_line": 56,
              "end_line": 63,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage raises ValueError when total is zero.\n        "
            },
            {
              "name": "test_calculate_percentage_non_numeric",
              "parameters": [
                "self"
              ],
              "start_line": 65,
              "end_line": 82,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage raises TypeError for non-numeric inputs.\n        "
            },
            {
              "name": "test_calculate_percentage_infinity",
              "parameters": [
                "self"
              ],
              "start_line": 84,
              "end_line": 96,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with infinity values.\n        "
            },
            {
              "name": "test_calculate_percentage_nan",
              "parameters": [
                "self"
              ],
              "start_line": 98,
              "end_line": 106,
              "visibility": "public",
              "docstring": "\n        Test calculate_percentage with NaN (Not a Number) values.\n        "
            }
          ],
          "visibility": "public",
          "docstring": "\n    Test suite for the Calculator class.\n    "
        }
      ],
      "functions": [],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Here is the updated and comprehensive test suite for the `Calculator.calculate_percentage` method. The test cases cover normal functionality, edge cases, and error conditions.",
        "File: tests/test_calculator.py",
        "Normal functionality tests",
        "Edge case tests",
        "Error condition tests",
        "## Explanation of Test Cases",
        "1. **Normal Functionality Tests**:",
        "- These tests ensure that the method works correctly for typical inputs, including integers and floats.",
        "2. **Edge Case Tests**:",
        "- Small values: Tests the method's behavior with very small numbers.",
        "- Large values: Tests the method's behavior with very large numbers.",
        "- Negative values: Tests the method's behavior when either or both inputs are negative.",
        "- Zero value: Tests the method's behavior when the `value` is zero.",
        "3. **Error Condition Tests**:",
        "- Zero total: Ensures that the method raises a `ValueError` when the `total` is zero.",
        "- Non-numeric inputs: Ensures that the method raises a `TypeError` when inputs are not numeric.",
        "- Infinity: Ensures that the method handles infinity values appropriately.",
        "- NaN: Ensures that the method raises a `TypeError` when inputs are NaN.",
        "4. **Comprehensive Coverage**:",
        "- The test suite ensures that all edge cases and potential error conditions are covered, providing confidence in the robustness of the `calculate_percentage` method.",
        "### Running the Tests",
        "To run the tests, execute the following command in the terminal:",
        "pytest tests/test_calculator.py"
      ],
      "docstring": null
    },
    {
      "path": "test_req007.py",
      "language": "python",
      "size": 4511,
      "lines_of_code": 64,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 9,
          "end_line": 91,
          "methods": [
            {
              "name": "calc",
              "parameters": [
                "self"
              ],
              "start_line": 15,
              "end_line": 19,
              "visibility": "public",
              "docstring": "\n        Fixture to create a Calculator instance for testing.\n        ",
              "decorators": [
                "pytest.fixture"
              ]
            },
            {
              "name": "test_add",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 22,
              "end_line": 26,
              "visibility": "public"
            },
            {
              "name": "test_subtract",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 29,
              "end_line": 33,
              "visibility": "public"
            },
            {
              "name": "test_multiply",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 36,
              "end_line": 40,
              "visibility": "public"
            },
            {
              "name": "test_divide",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 43,
              "end_line": 47,
              "visibility": "public"
            },
            {
              "name": "test_add_and_multiply_by_two",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 50,
              "end_line": 54,
              "visibility": "public"
            },
            {
              "name": "test_sum_list",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 57,
              "end_line": 61,
              "visibility": "public"
            },
            {
              "name": "test_sum_list_edge_cases",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 64,
              "end_line": 67,
              "visibility": "public"
            },
            {
              "name": "test_divide_edge_cases",
              "parameters": [
                "self",
                "calc"
              ],
              "start_line": 70,
              "end_line": 73,
              "visibility": "public"
            },
            {
              "name": "test_logging_functionality",
              "parameters": [
                "self",
                "calc",
                "caplog"
              ],
              "start_line": 76,
              "end_line": 91,
              "visibility": "public"
            }
          ],
          "visibility": "public",
          "docstring": "\n    Test suite for the Calculator class.\n    "
        }
      ],
      "functions": [],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Below is the updated `tests/test_calculator.py` file rewritten using `pytest` to meet the requirements for comprehensive test cases. The test cases cover normal functionality, edge cases, and error conditions.",
        "File: tests/test_calculator.py",
        "Test cases for the add method",
        "Test cases for the subtract method",
        "Test cases for the multiply method",
        "Test cases for the divide method",
        "Test cases for the add_and_multiply_by_two method",
        "Test cases for the sum_list method",
        "Edge case tests for sum_list",
        "Edge case tests for divide",
        "Test logging functionality indirectly",
        "Check that logs are generated for each operation",
        "## Explanation of the Test Cases",
        "1. **Normal Functionality**:",
        "- Each method (`add`, `subtract`, `multiply`, `divide`, `add_and_multiply_by_two`, `sum_list`) is tested with typical inputs to ensure correct results.",
        "2. **Edge Cases**:",
        "- For `add`, `subtract`, and `multiply`, edge cases like zero, negative numbers, and floating-point numbers are tested.",
        "- For `divide`, edge cases like division by zero (raises `ValueError`), division of zero, and negative numbers are tested.",
        "- For `sum_list`, edge cases like an empty list, a single-element list, and a list with mixed positive and negative numbers are tested.",
        "3. **Error Conditions**:",
        "- The `divide` method is tested to ensure it raises a `ValueError` when attempting to divide by zero.",
        "4. **Logging Functionality**:",
        "- The `caplog` pytest fixture is used to capture log messages and verify that the correct log entries are generated for each operation.",
        "### How to Run the Tests",
        "1. Install `pytest` if not already installed:",
        "pip install pytest",
        "2. Run the tests using the following command:",
        "pytest tests/test_calculator.py",
        "3. View the test results in the terminal."
      ],
      "docstring": null
    },
    {
      "path": "test_req008.py",
      "language": "python",
      "size": 5650,
      "lines_of_code": 112,
      "classes": [],
      "functions": [
        {
          "name": "mock_calculator",
          "parameters": [],
          "start_line": 14,
          "end_line": 25,
          "visibility": "public",
          "docstring": "\n    Fixture to provide a mock Calculator instance.\n    ",
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_display_menu",
          "parameters": [
            "capsys"
          ],
          "start_line": 28,
          "end_line": 36,
          "visibility": "public",
          "docstring": "\n    Test that the menu is displayed correctly.\n    "
        },
        {
          "name": "test_get_user_choice_valid_input",
          "parameters": [
            "user_input",
            "expected_choice"
          ],
          "start_line": 47,
          "end_line": 53,
          "visibility": "public",
          "docstring": "\n    Test valid user inputs for menu choice.\n    ",
          "decorators": [
            "pytest.mark.parametrize('user_input, expected_choice', [('1', 1), ('7', 7), ('3', 3)])"
          ]
        },
        {
          "name": "test_get_user_choice_invalid_input",
          "parameters": [
            "user_input"
          ],
          "start_line": 57,
          "end_line": 63,
          "visibility": "public",
          "docstring": "\n    Test invalid user inputs for menu choice.\n    ",
          "decorators": [
            "pytest.mark.parametrize('user_input', ['0', '8', 'abc', '', '-1'])"
          ]
        },
        {
          "name": "test_handle_user_choice_valid_operations",
          "parameters": [
            "mock_calculator",
            "choice",
            "inputs",
            "expected_output",
            "capsys"
          ],
          "start_line": 77,
          "end_line": 86,
          "visibility": "public",
          "docstring": "\n    Test valid operations for each menu choice.\n    ",
          "decorators": [
            "pytest.mark.parametrize('choice, inputs, expected_output', [(1, ['2', '3'], 'Result: 5'), (2, ['5', '2'], 'Result: 3'), (3, ['2', '3'], 'Result: 6'), (4, ['6', '3'], 'Result: 2'), (5, ['3', '4'], 'Result: 14'), (6, ['1 2 3 4 5'], 'Result: 15')])"
          ]
        },
        {
          "name": "test_handle_user_choice_division_by_zero",
          "parameters": [
            "mock_calculator",
            "capsys"
          ],
          "start_line": 89,
          "end_line": 96,
          "visibility": "public",
          "docstring": "\n    Test division by zero error handling.\n    "
        },
        {
          "name": "test_handle_user_choice_invalid_numeric_input",
          "parameters": [
            "mock_calculator",
            "choice",
            "inputs",
            "capsys"
          ],
          "start_line": 109,
          "end_line": 118,
          "visibility": "public",
          "docstring": "\n    Test invalid numeric inputs for operations.\n    ",
          "decorators": [
            "pytest.mark.parametrize('choice, inputs', [(1, ['a', '3']), (2, ['5', 'b']), (3, ['x', 'y']), (5, ['3', 'z']), (6, ['1 2 a 4'])])"
          ]
        },
        {
          "name": "test_handle_user_choice_exit",
          "parameters": [
            "mock_calculator"
          ],
          "start_line": 121,
          "end_line": 127,
          "visibility": "public",
          "docstring": "\n    Test the exit option (choice 7).\n    "
        },
        {
          "name": "test_handle_user_choice_invalid_choice",
          "parameters": [
            "mock_calculator",
            "capsys"
          ],
          "start_line": 130,
          "end_line": 136,
          "visibility": "public",
          "docstring": "\n    Test handling of an invalid menu choice.\n    "
        }
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import patch",
        "from unittest.mock import MagicMock",
        "from code import display_menu",
        "from code import get_user_choice",
        "from code import handle_user_choice",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Below is a comprehensive set of pytest test cases for the provided `code.py` functionality. These tests cover normal functionality, edge cases, and error conditions. Mocking is used to simulate user input and interactions with the `Calculator` class.",
        "## Test Code",
        "File: test_code.py",
        "---",
        "## Explanation of Test Cases",
        "1. **`test_display_menu`**:",
        "- Verifies that the menu is displayed correctly by capturing the printed output.",
        "2. **`test_get_user_choice_valid_input`**:",
        "- Tests valid user inputs for menu choices (e.g., 1, 7, 3).",
        "3. **`test_get_user_choice_invalid_input`**:",
        "- Tests invalid user inputs (e.g., out-of-range numbers, non-numeric inputs).",
        "4. **`test_handle_user_choice_valid_operations`**:",
        "- Tests valid operations for each menu choice by mocking user inputs and verifying the output.",
        "5. **`test_handle_user_choice_division_by_zero`**:",
        "- Tests division by zero handling for choice 4.",
        "6. **`test_handle_user_choice_invalid_numeric_input`**:",
        "- Tests invalid numeric inputs for operations (e.g., non-numeric values).",
        "7. **`test_handle_user_choice_exit`**:",
        "- Tests the exit functionality (choice 7) by mocking `sys.exit`.",
        "8. **`test_handle_user_choice_invalid_choice`**:",
        "- Tests handling of invalid menu choices (e.g., choice 8).",
        "---",
        "### Notes",
        "- **Mocking**:",
        "- `unittest.mock.patch` is used to mock user input (`builtins.input`) and system exit (`sys.exit`).",
        "- A `MagicMock` instance is used to mock the `Calculator` class.",
        "- **Fixtures**:",
        "- The `mock_calculator` fixture provides a reusable mock `Calculator` instance for all tests.",
        "- **Edge Cases**:",
        "- Includes tests for invalid inputs, division by zero, and out-of-range menu choices.",
        "- **Captured Output**:",
        "- `capsys` is used to capture and verify printed output.",
        "This test suite ensures that the CLI menu interface behaves as expected under various conditions."
      ],
      "docstring": null
    },
    {
      "path": "code.py",
      "language": "python",
      "size": 1345,
      "lines_of_code": 36,
      "classes": [],
      "functions": [
        {
          "name": "store_in_memory",
          "parameters": [
            "value: float"
          ],
          "start_line": 12,
          "end_line": 27,
          "visibility": "public",
          "docstring": "\n    Stores a given value in the calculator's memory.\n\n    Args:\n        value (float): The value to store in memory.\n\n    Raises:\n        ValueError: If the provided value is not a valid float.\n    ",
          "return_type": "None"
        },
        {
          "name": "recall_memory",
          "parameters": [],
          "start_line": 30,
          "end_line": 37,
          "visibility": "public",
          "docstring": "\n    Recalls the value stored in the calculator's memory.\n\n    Returns:\n        float: The value currently stored in memory.\n    ",
          "return_type": "float"
        },
        {
          "name": "clear_memory",
          "parameters": [],
          "start_line": 40,
          "end_line": 45,
          "visibility": "public",
          "docstring": "\n    Clears the value stored in the calculator's memory.\n    ",
          "return_type": "None"
        }
      ],
      "imports": [
        "from typing import Union",
        "from typing import List",
        "from typing import Union",
        "import datetime",
        "import logging",
        "import sys"
      ],
      "constants": {},
      "comments": [
        "File: code.py",
        "Global variable to simulate calculator memory storage",
        "Example usage of the memory functions",
        "Storing a value in memory",
        "Clearing memory"
      ],
      "docstring": null
    },
    {
      "path": "test_req004.py",
      "language": "python",
      "size": 5191,
      "lines_of_code": 90,
      "classes": [],
      "functions": [
        {
          "name": "test_store_in_memory_and_recall",
          "parameters": [],
          "start_line": 9,
          "end_line": 16,
          "visibility": "public",
          "docstring": "\n    Test storing a value in memory and recalling it.\n    "
        },
        {
          "name": "test_clear_memory",
          "parameters": [],
          "start_line": 19,
          "end_line": 28,
          "visibility": "public",
          "docstring": "\n    Test clearing the memory.\n    "
        },
        {
          "name": "test_store_in_memory_with_integer",
          "parameters": [],
          "start_line": 31,
          "end_line": 38,
          "visibility": "public",
          "docstring": "\n    Test storing an integer value in memory.\n    "
        },
        {
          "name": "test_store_in_memory_with_negative_value",
          "parameters": [],
          "start_line": 41,
          "end_line": 48,
          "visibility": "public",
          "docstring": "\n    Test storing a negative value in memory.\n    "
        },
        {
          "name": "test_store_in_memory_with_zero",
          "parameters": [],
          "start_line": 51,
          "end_line": 58,
          "visibility": "public",
          "docstring": "\n    Test storing zero in memory.\n    "
        },
        {
          "name": "test_store_in_memory_with_large_value",
          "parameters": [],
          "start_line": 61,
          "end_line": 69,
          "visibility": "public",
          "docstring": "\n    Test storing a very large value in memory.\n    "
        },
        {
          "name": "test_store_in_memory_with_invalid_type",
          "parameters": [],
          "start_line": 72,
          "end_line": 79,
          "visibility": "public",
          "docstring": "\n    Test storing a non-numeric value in memory, which should raise a ValueError.\n    "
        },
        {
          "name": "test_store_in_memory_with_none",
          "parameters": [],
          "start_line": 82,
          "end_line": 89,
          "visibility": "public",
          "docstring": "\n    Test storing None in memory, which should raise a ValueError.\n    "
        },
        {
          "name": "test_memory_persistence",
          "parameters": [],
          "start_line": 92,
          "end_line": 101,
          "visibility": "public",
          "docstring": "\n    Test that memory persists until explicitly cleared.\n    "
        },
        {
          "name": "test_memory_reset_after_clear",
          "parameters": [],
          "start_line": 104,
          "end_line": 113,
          "visibility": "public",
          "docstring": "\n    Test that memory is reset to 0.0 after clearing.\n    "
        },
        {
          "name": "test_multiple_operations",
          "parameters": [],
          "start_line": 116,
          "end_line": 127,
          "visibility": "public",
          "docstring": "\n    Test a sequence of operations: store, recall, clear, and recall again.\n    "
        },
        {
          "name": "test_store_in_memory_with_float_edge_cases",
          "parameters": [],
          "start_line": 130,
          "end_line": 144,
          "visibility": "public",
          "docstring": "\n    Test storing edge case float values in memory.\n    "
        }
      ],
      "imports": [
        "import pytest",
        "from code import store_in_memory",
        "from code import recall_memory",
        "from code import clear_memory"
      ],
      "constants": {},
      "comments": [
        "Here is a comprehensive set of pytest test cases for the provided `code.py` file. These test cases cover normal functionality, edge cases, and error conditions.",
        "File: test_code.py",
        "Store a value",
        "Recall the value and assert correctness",
        "Store a value",
        "Clear the memory",
        "Assert that memory is cleared (reset to 0.0)",
        "Store an integer value",
        "Recall the value and assert correctness",
        "Store a negative value",
        "Recall the value and assert correctness",
        "Store zero",
        "Recall the value and assert correctness",
        "Store a large value",
        "Recall the value and assert correctness",
        "Store a value",
        "Recall the value and assert correctness",
        "Recall again to ensure persistence",
        "Store a value",
        "Clear the memory",
        "Assert that memory is reset",
        "Store a value",
        "Recall the value and assert correctness",
        "Clear the memory",
        "Recall again and assert memory is cleared",
        "Store positive infinity",
        "Store negative infinity",
        "Store NaN (Not a Number)",
        "Run the tests",
        "## Explanation of Test Cases:",
        "1. **Normal Functionality**:",
        "- `test_store_in_memory_and_recall`: Tests storing and recalling a value.",
        "- `test_clear_memory`: Tests clearing the memory.",
        "- `test_store_in_memory_with_integer`: Tests storing an integer value.",
        "- `test_store_in_memory_with_negative_value`: Tests storing a negative value.",
        "- `test_store_in_memory_with_zero`: Tests storing zero.",
        "- `test_store_in_memory_with_large_value`: Tests storing a very large value.",
        "2. **Edge Cases**:",
        "- `test_store_in_memory_with_float_edge_cases`: Tests storing special float values like infinity and NaN.",
        "- `test_memory_persistence`: Ensures memory persists until explicitly cleared.",
        "- `test_memory_reset_after_clear`: Ensures memory is reset after clearing.",
        "3. **Error Conditions**:",
        "- `test_store_in_memory_with_invalid_type`: Tests storing a non-numeric value (e.g., string).",
        "- `test_store_in_memory_with_none`: Tests storing `None`.",
        "4. **Sequence of Operations**:",
        "- `test_multiple_operations`: Tests a sequence of operations (store, recall, clear, recall again).",
        "### Notes:",
        "- The `pytest.raises` context manager is used to test error conditions.",
        "- Edge cases like `float('inf')`, `float('-inf')`, and `float('nan')` are tested to ensure robustness.",
        "- The tests are designed to be independent and comprehensive."
      ],
      "docstring": null
    },
    {
      "path": "main.py",
      "language": "python",
      "size": 2577,
      "lines_of_code": 68,
      "classes": [],
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "start_line": 12,
          "end_line": 103,
          "visibility": "public",
          "docstring": "Main function to demonstrate calculator operations."
        }
      ],
      "imports": [
        "import logging",
        "import datetime",
        "from typing import List",
        "from typing import Union",
        "from calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "!/usr/bin/env python3",
        "Create calculator instance",
        "Basic arithmetic operations",
        "Addition",
        "Subtraction",
        "Multiplication",
        "Division",
        "Special operations",
        "Add and multiply by two",
        "List operations",
        "Error handling examples"
      ],
      "docstring": "\nMain script to demonstrate the Calculator functionality.\n"
    },
    {
      "path": "test_req005.py",
      "language": "python",
      "size": 4932,
      "lines_of_code": 52,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 9,
          "end_line": 75,
          "methods": [
            {
              "name": "setup_method",
              "parameters": [
                "self"
              ],
              "start_line": 14,
              "end_line": 16,
              "visibility": "public",
              "docstring": "Setup method to initialize the Calculator instance."
            },
            {
              "name": "test_square_root_positive_integer",
              "parameters": [
                "self"
              ],
              "start_line": 19,
              "end_line": 21,
              "visibility": "public",
              "docstring": "Test square root of a positive integer."
            },
            {
              "name": "test_square_root_positive_float",
              "parameters": [
                "self"
              ],
              "start_line": 23,
              "end_line": 25,
              "visibility": "public",
              "docstring": "Test square root of a positive float."
            },
            {
              "name": "test_square_root_large_number",
              "parameters": [
                "self"
              ],
              "start_line": 27,
              "end_line": 29,
              "visibility": "public",
              "docstring": "Test square root of a large number."
            },
            {
              "name": "test_square_root_zero",
              "parameters": [
                "self"
              ],
              "start_line": 32,
              "end_line": 34,
              "visibility": "public",
              "docstring": "Test square root of zero."
            },
            {
              "name": "test_square_root_small_positive_number",
              "parameters": [
                "self"
              ],
              "start_line": 36,
              "end_line": 38,
              "visibility": "public",
              "docstring": "Test square root of a very small positive number."
            },
            {
              "name": "test_square_root_negative_integer",
              "parameters": [
                "self"
              ],
              "start_line": 41,
              "end_line": 46,
              "visibility": "public",
              "docstring": "Test square root of a negative integer raises ValueError."
            },
            {
              "name": "test_square_root_negative_float",
              "parameters": [
                "self"
              ],
              "start_line": 48,
              "end_line": 53,
              "visibility": "public",
              "docstring": "Test square root of a negative float raises ValueError."
            },
            {
              "name": "test_square_root_very_large_number",
              "parameters": [
                "self"
              ],
              "start_line": 56,
              "end_line": 59,
              "visibility": "public",
              "docstring": "Test square root of a very large number."
            },
            {
              "name": "test_square_root_very_small_positive_float",
              "parameters": [
                "self"
              ],
              "start_line": 61,
              "end_line": 64,
              "visibility": "public",
              "docstring": "Test square root of a very small positive float."
            },
            {
              "name": "test_square_root_non_numeric_input",
              "parameters": [
                "self"
              ],
              "start_line": 66,
              "end_line": 69,
              "visibility": "public",
              "docstring": "Test square root with non-numeric input raises TypeError."
            },
            {
              "name": "test_square_root_boolean_input",
              "parameters": [
                "self"
              ],
              "start_line": 71,
              "end_line": 75,
              "visibility": "public",
              "docstring": "Test square root with boolean input."
            }
          ],
          "visibility": "public",
          "docstring": "\n    Unit tests for the Calculator class.\n    "
        }
      ],
      "functions": [],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Here is the updated and comprehensive `tests/test_calculator.py` file with additional test cases to ensure thorough testing of the `square_root` method in the `Calculator` class:",
        "File: tests/test_calculator.py",
        "Normal functionality tests",
        "Edge case tests",
        "Error condition tests",
        "Additional tests for edge cases",
        "True is treated as 1, False is treated as 0 in Python",
        "### Explanation of the Test Cases",
        "1. **Normal Functionality Tests**:",
        "- `test_square_root_positive_integer`: Tests the square root of a positive integer.",
        "- `test_square_root_positive_float`: Tests the square root of a positive float.",
        "- `test_square_root_large_number`: Tests the square root of a large number.",
        "2. **Edge Case Tests**:",
        "- `test_square_root_zero`: Tests the square root of zero, which should return `0.0`.",
        "- `test_square_root_small_positive_number`: Tests the square root of a very small positive number.",
        "3. **Error Condition Tests**:",
        "- `test_square_root_negative_integer`: Ensures that a `ValueError` is raised for a negative integer.",
        "- `test_square_root_negative_float`: Ensures that a `ValueError` is raised for a negative float.",
        "4. **Additional Edge Case Tests**:",
        "- `test_square_root_very_large_number`: Tests the square root of a very large number to ensure the method handles large inputs correctly.",
        "- `test_square_root_very_small_positive_float`: Tests the square root of a very small positive float to ensure precision.",
        "5. **Non-Numeric Input Tests**:",
        "- `test_square_root_non_numeric_input`: Ensures that a `TypeError` is raised when a non-numeric input (e.g., a string) is passed.",
        "- `test_square_root_boolean_input`: Tests the behavior when boolean values (`True` and `False`) are passed, as Python treats `True` as `1` and `False` as `0`.",
        "### Notes",
        "- The `test_square_root_non_numeric_input` test case assumes that the `square_root` method will raise a `TypeError` if a non-numeric input is passed. If the method does not currently handle this, you may need to add input validation to the `square_root` method in `calculator.py`.",
        "- The `test_square_root_boolean_input` test case is included to verify how the method handles boolean inputs, which are valid numeric types in Python.",
        "These test cases ensure that the `square_root` method is thoroughly tested for normal functionality, edge cases, and error conditions."
      ],
      "docstring": null
    },
    {
      "path": "test_req001.py",
      "language": "python",
      "size": 3813,
      "lines_of_code": 61,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 9,
          "end_line": 78,
          "methods": [
            {
              "name": "test_factorial_positive_integer",
              "parameters": [
                "self"
              ],
              "start_line": 15,
              "end_line": 21,
              "visibility": "public",
              "docstring": "\n        Test factorial of a positive integer.\n        "
            },
            {
              "name": "test_factorial_zero",
              "parameters": [
                "self"
              ],
              "start_line": 24,
              "end_line": 28,
              "visibility": "public",
              "docstring": "\n        Test factorial of zero.\n        "
            },
            {
              "name": "test_factorial_one",
              "parameters": [
                "self"
              ],
              "start_line": 30,
              "end_line": 34,
              "visibility": "public",
              "docstring": "\n        Test factorial of one.\n        "
            },
            {
              "name": "test_factorial_negative_integer",
              "parameters": [
                "self"
              ],
              "start_line": 37,
              "end_line": 48,
              "visibility": "public",
              "docstring": "\n        Test factorial of a negative integer raises ValueError.\n        "
            },
            {
              "name": "test_factorial_non_integer",
              "parameters": [
                "self"
              ],
              "start_line": 50,
              "end_line": 63,
              "visibility": "public",
              "docstring": "\n        Test factorial of a non-integer raises TypeError.\n        "
            },
            {
              "name": "test_factorial_large_number",
              "parameters": [
                "self"
              ],
              "start_line": 66,
              "end_line": 71,
              "visibility": "public",
              "docstring": "\n        Test factorial of a large number to ensure it handles large results.\n        "
            },
            {
              "name": "test_factorial_boundary_case",
              "parameters": [
                "self"
              ],
              "start_line": 73,
              "end_line": 78,
              "visibility": "public",
              "docstring": "\n        Test factorial at the boundary of valid input (e.g., 2).\n        "
            }
          ],
          "visibility": "public",
          "docstring": "\n    Unit tests for the Calculator class.\n    "
        }
      ],
      "functions": [],
      "imports": [
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "Here is the updated and comprehensive test suite for the `Calculator.factorial` method. The test cases cover normal functionality, edge cases, and error conditions.",
        "File: tests/test_calculator.py",
        "Normal functionality tests",
        "Edge case tests",
        "Error condition tests",
        "Additional edge case tests",
        "## Explanation of the Test Cases",
        "1. **Normal Functionality Tests**:",
        "- `test_factorial_positive_integer`: Tests the factorial of typical positive integers like 5, 6, and 10.",
        "2. **Edge Case Tests**:",
        "- `test_factorial_zero`: Tests the factorial of 0, which should return 1.",
        "- `test_factorial_one`: Tests the factorial of 1, which should also return 1.",
        "- `test_factorial_large_number`: Tests the factorial of large numbers like 20 and 15 to ensure the function handles large results correctly.",
        "- `test_factorial_boundary_case`: Tests the factorial of small positive integers like 2 and 3 to ensure correctness at the boundary of valid input.",
        "3. **Error Condition Tests**:",
        "- `test_factorial_negative_integer`: Ensures that a `ValueError` is raised when a negative integer is passed.",
        "- `test_factorial_non_integer`: Ensures that a `TypeError` is raised when the input is not an integer (e.g., float, string, list, dictionary, or `None`).",
        "### How to Run the Tests",
        "To run the tests, use the following command in the terminal:",
        "pytest tests/test_calculator.py",
        "This will execute all the test cases and provide a detailed report of the results."
      ],
      "docstring": null
    },
    {
      "path": "calculator/__init__.py",
      "language": "python",
      "size": 146,
      "lines_of_code": 6,
      "classes": [],
      "functions": [],
      "imports": [
        "from calculator import Calculator"
      ],
      "constants": {},
      "comments": [],
      "docstring": "\nCalculator package for basic mathematical operations.\n"
    },
    {
      "path": "calculator/calculator.py",
      "language": "python",
      "size": 3785,
      "lines_of_code": 103,
      "classes": [],
      "functions": [
        {
          "name": "display_menu",
          "parameters": [],
          "start_line": 7,
          "end_line": 18,
          "visibility": "public",
          "docstring": "\n    Displays the CLI menu with numbered options for user interaction.\n    ",
          "return_type": "None"
        },
        {
          "name": "get_user_choice",
          "parameters": [],
          "start_line": 21,
          "end_line": 35,
          "visibility": "public",
          "docstring": "\n    Prompts the user to select an option from the menu.\n\n    Returns:\n        int: The user's menu choice.\n    ",
          "return_type": "int"
        },
        {
          "name": "handle_user_choice",
          "parameters": [
            "choice: int",
            "calculator: Calculator"
          ],
          "start_line": 38,
          "end_line": 101,
          "visibility": "public",
          "docstring": "\n    Handles the user's menu choice and performs the corresponding operation.\n\n    Args:\n        choice (int): The user's menu choice.\n        calculator (Calculator): An instance of the Calculator class.\n    ",
          "return_type": "None"
        },
        {
          "name": "main",
          "parameters": [],
          "start_line": 104,
          "end_line": 113,
          "visibility": "public",
          "docstring": "\n    Main function to run the CLI menu interface.\n    ",
          "return_type": "None"
        }
      ],
      "imports": [
        "import sys",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [
        "File: code.py"
      ],
      "docstring": null
    },
    {
      "path": "tests/__init__.py",
      "language": "python",
      "size": 49,
      "lines_of_code": 3,
      "classes": [],
      "functions": [],
      "imports": [],
      "constants": {},
      "comments": [],
      "docstring": "\nTest package for the calculator project.\n"
    },
    {
      "path": "tests/test_calculator.py",
      "language": "python",
      "size": 4987,
      "lines_of_code": 111,
      "classes": [
        {
          "name": "TestCalculator",
          "start_line": 13,
          "end_line": 134,
          "methods": [
            {
              "name": "setup_method",
              "parameters": [
                "self"
              ],
              "start_line": 16,
              "end_line": 18,
              "visibility": "public",
              "docstring": "Set up test fixtures."
            },
            {
              "name": "test_add_integers",
              "parameters": [
                "self"
              ],
              "start_line": 20,
              "end_line": 24,
              "visibility": "public",
              "docstring": "Test addition with integers."
            },
            {
              "name": "test_add_floats",
              "parameters": [
                "self"
              ],
              "start_line": 26,
              "end_line": 30,
              "visibility": "public",
              "docstring": "Test addition with floats."
            },
            {
              "name": "test_subtract_integers",
              "parameters": [
                "self"
              ],
              "start_line": 32,
              "end_line": 36,
              "visibility": "public",
              "docstring": "Test subtraction with integers."
            },
            {
              "name": "test_subtract_floats",
              "parameters": [
                "self"
              ],
              "start_line": 38,
              "end_line": 42,
              "visibility": "public",
              "docstring": "Test subtraction with floats."
            },
            {
              "name": "test_multiply_integers",
              "parameters": [
                "self"
              ],
              "start_line": 44,
              "end_line": 48,
              "visibility": "public",
              "docstring": "Test multiplication with integers."
            },
            {
              "name": "test_multiply_floats",
              "parameters": [
                "self"
              ],
              "start_line": 50,
              "end_line": 54,
              "visibility": "public",
              "docstring": "Test multiplication with floats."
            },
            {
              "name": "test_multiply_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 56,
              "end_line": 61,
              "visibility": "public",
              "docstring": "Test multiplication with invalid types."
            },
            {
              "name": "test_divide_integers",
              "parameters": [
                "self"
              ],
              "start_line": 63,
              "end_line": 67,
              "visibility": "public",
              "docstring": "Test division with integers."
            },
            {
              "name": "test_divide_floats",
              "parameters": [
                "self"
              ],
              "start_line": 69,
              "end_line": 73,
              "visibility": "public",
              "docstring": "Test division with floats."
            },
            {
              "name": "test_divide_by_zero",
              "parameters": [
                "self"
              ],
              "start_line": 75,
              "end_line": 78,
              "visibility": "public",
              "docstring": "Test division by zero."
            },
            {
              "name": "test_divide_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 80,
              "end_line": 85,
              "visibility": "public",
              "docstring": "Test division with invalid types."
            },
            {
              "name": "test_add_and_multiply_by_two",
              "parameters": [
                "self"
              ],
              "start_line": 87,
              "end_line": 91,
              "visibility": "public",
              "docstring": "Test add_and_multiply_by_two method."
            },
            {
              "name": "test_add_and_multiply_by_two_type_error",
              "parameters": [
                "self"
              ],
              "start_line": 93,
              "end_line": 98,
              "visibility": "public",
              "docstring": "Test add_and_multiply_by_two with invalid types."
            },
            {
              "name": "test_sum_list_integers",
              "parameters": [
                "self"
              ],
              "start_line": 100,
              "end_line": 104,
              "visibility": "public",
              "docstring": "Test sum_list with integers."
            },
            {
              "name": "test_sum_list_floats",
              "parameters": [
                "self"
              ],
              "start_line": 106,
              "end_line": 110,
              "visibility": "public",
              "docstring": "Test sum_list with floats."
            },
            {
              "name": "test_sum_list_mixed",
              "parameters": [
                "self"
              ],
              "start_line": 112,
              "end_line": 115,
              "visibility": "public",
              "docstring": "Test sum_list with mixed integer and float values."
            },
            {
              "name": "test_sum_list_empty",
              "parameters": [
                "self"
              ],
              "start_line": 117,
              "end_line": 120,
              "visibility": "public",
              "docstring": "Test sum_list with empty list."
            },
            {
              "name": "test_sum_list_not_list",
              "parameters": [
                "self"
              ],
              "start_line": 122,
              "end_line": 127,
              "visibility": "public",
              "docstring": "Test sum_list with non-list input."
            },
            {
              "name": "test_sum_list_non_numeric",
              "parameters": [
                "self"
              ],
              "start_line": 129,
              "end_line": 134,
              "visibility": "public",
              "docstring": "Test sum_list with non-numeric elements."
            }
          ],
          "visibility": "public",
          "docstring": "Test cases for Calculator class."
        }
      ],
      "functions": [],
      "imports": [
        "import logging",
        "import datetime",
        "from typing import List",
        "from typing import Union",
        "from typing import Union",
        "import pytest",
        "from calculator.calculator import Calculator"
      ],
      "constants": {},
      "comments": [],
      "docstring": "\nTest cases for the Calculator class.\n"
    },
    {
      "path": "CodeUtils.java",
      "language": "java",
      "size": 11223,
      "lines_of_code": 217,
      "classes": [
        {
          "name": "CodeUtils",
          "start_line": 1,
          "end_line": 0,
          "methods": [],
          "visibility": "public"
        }
      ],
      "functions": [
        {
          "name": "addition",
          "parameters": [
            "double a",
            "double b"
          ],
          "start_line": 10,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "subtraction",
          "parameters": [
            "double a",
            "double b"
          ],
          "start_line": 21,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "multiplyTwoNumbers",
          "parameters": [
            "double num1",
            "double num2"
          ],
          "start_line": 32,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "divideNumbers",
          "parameters": [
            "double numerator",
            "double denominator"
          ],
          "start_line": 46,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "denominator == 0"
          ],
          "start_line": 47,
          "end_line": 0,
          "visibility": "package",
          "return_type": "zero"
        },
        {
          "name": "addNumbersAndDouble",
          "parameters": [
            "Integer number1",
            "Integer number2"
          ],
          "start_line": 65,
          "end_line": 0,
          "visibility": "public",
          "return_type": "Integer",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "number1 == null || number2 == null"
          ],
          "start_line": 66,
          "end_line": 0,
          "visibility": "package",
          "return_type": "parameters"
        },
        {
          "name": "calculateSumOfList",
          "parameters": [
            "List<Integer> numbers"
          ],
          "start_line": 84,
          "end_line": 0,
          "visibility": "public",
          "return_type": "int",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "numbers == null"
          ],
          "start_line": 85,
          "end_line": 0,
          "visibility": "package",
          "return_type": "input"
        },
        {
          "name": "processInputString",
          "parameters": [
            "String input"
          ],
          "start_line": 113,
          "end_line": 0,
          "visibility": "public",
          "return_type": "String",
          "is_static": true
        },
        {
          "name": "validateInputTypesForOperations",
          "parameters": [
            "Object input1",
            "Object input2"
          ],
          "start_line": 138,
          "end_line": 0,
          "visibility": "public",
          "return_type": "void",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "input1 == null"
          ],
          "start_line": 139,
          "end_line": 0,
          "visibility": "package",
          "return_type": "null"
        },
        {
          "name": "if",
          "parameters": [
            "input2 == null"
          ],
          "start_line": 144,
          "end_line": 0,
          "visibility": "package",
          "return_type": "null"
        },
        {
          "name": "divideWithValidation",
          "parameters": [
            "double numerator",
            "double denominator"
          ],
          "start_line": 169,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "denominator == 0"
          ],
          "start_line": 170,
          "end_line": 0,
          "visibility": "package",
          "return_type": "zero"
        },
        {
          "name": "sumNonEmptyList",
          "parameters": [
            "List<Integer> numbers"
          ],
          "start_line": 187,
          "end_line": 0,
          "visibility": "public",
          "return_type": "int",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "numbers == null"
          ],
          "start_line": 188,
          "end_line": 0,
          "visibility": "package",
          "return_type": "null"
        },
        {
          "name": "sumNumericElements",
          "parameters": [
            "List<Object> elements"
          ],
          "start_line": 215,
          "end_line": 0,
          "visibility": "public",
          "return_type": "double",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "elements == null"
          ],
          "start_line": 216,
          "end_line": 0,
          "visibility": "package",
          "return_type": "input"
        },
        {
          "name": "demonstrateCalculatorOperations",
          "parameters": [
            "Scanner scanner"
          ],
          "start_line": 241,
          "end_line": 0,
          "visibility": "public",
          "return_type": "void",
          "is_static": true
        },
        {
          "name": "if",
          "parameters": [
            "scanner == null"
          ],
          "start_line": 242,
          "end_line": 0,
          "visibility": "package",
          "return_type": "parameter"
        }
      ],
      "imports": [],
      "constants": {},
      "comments": [
        "Validate that the denominator is not zero to prevent division by zero",
        "Perform the division and return the result",
        "Validate input parameters",
        "Perform the addition and multiplication",
        "Validate input",
        "Calculate the sum of the list",
        "Handle potential null elements in the list",
        "Validate the input parameter",
        "Example processing logic (can be replaced with actual implementation)",
        "For demonstration, let's convert the string to uppercase",
        "Handle any unexpected exceptions",
        "Check if the first input is null",
        "Check if the second input is null",
        "Check if the first input is of type Number",
        "Check if the second input is of type Number",
        "Validate that the denominator is not zero",
        "Perform the division",
        "Validate that the input list is not null",
        "Validate that the input list is not empty",
        "Calculate and return the sum of the list",
        "Validate input",
        "Validate the input parameter",
        "Addition",
        "Subtraction"
      ],
      "docstring": null
    },
    {
      "path": "htmlcov/coverage_html_cb_6fb7b396.js",
      "language": "javascript",
      "size": 25474,
      "lines_of_code": 551,
      "classes": [],
      "functions": [
        {
          "name": "debounce",
          "parameters": [
            "callback",
            "wait"
          ],
          "start_line": 11,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "checkVisible",
          "parameters": [
            "element"
          ],
          "start_line": 21,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "on_click",
          "parameters": [
            "sel",
            "fn"
          ],
          "start_line": 28,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "getCellValue",
          "parameters": [
            "row",
            "column = 0"
          ],
          "start_line": 36,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "rowComparator",
          "parameters": [
            "rowA",
            "rowB",
            "column = 0"
          ],
          "start_line": 50,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "sortColumn",
          "parameters": [
            "th"
          ],
          "start_line": 59,
          "end_line": 0,
          "visibility": "public"
        },
        {
          "name": "updateHeader",
          "parameters": [],
          "start_line": 697,
          "end_line": 0,
          "visibility": "public"
        }
      ],
      "imports": [],
      "constants": {},
      "comments": [
        "Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0",
        "For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt",
        "Coverage.py HTML report browser code.",
        "General helpers",
        "Helpers for table sorting",
        "nosemgrep: eslint.detect-object-injection",
        "Get the current sorting direction of the selected header,",
        "clear state on other headers and then set the new sorting direction.",
        "Sort all rows and afterwards append them in order to move them in the DOM.",
        "Save the sort order for next time.",
        "Sort by file if we don't have a column id",
        "Sort column has changed, unset sorting by function or class.",
        "Sort column has changed to by function or class, remember that.",
        "Find all the elements with data-shortcut attribute, and use them to assign a shortcut key.",
        "ignore keypress from search filter",
        "Create the events for the filter box.",
        "Populate the filter and hide100 inputs if there are saved values for them.",
        "Cache elements.",
        "Observe filter keyevents.",
        "Keep running total of each metric, first index contains number of shown rows",
        "Accumulate the percentage as fraction",
        "nosemgrep: eslint.detect-object-injection",
        "Store filter value",
        "Store hide value.",
        "Hide / show elements.",
        "Check the text filter.",
        "Check the \"hide covered\" filter.",
        "hide",
        "show",
        "Accumulate dynamic totals",
        "nosemgrep: eslint.detect-object-injection",
        "Last column contains percentage",
        "nosemgrep: eslint.detect-object-injection",
        "nosemgrep: eslint.detect-object-injection",
        "nosemgrep: eslint.detect-object-injection",
        "Show placeholder if no rows will be displayed.",
        "Show placeholder, hide table.",
        "Hide placeholder, show table.",
        "Calculate new dynamic sum values based on visible rows.",
        "Get footer cell element.",
        "nosemgrep: eslint.detect-object-injection",
        "Set value into dynamic footer cell element.",
        "Percentage column uses the numerator and denominator,",
        "and adapts to the number of decimal places.",
        "nosemgrep: eslint.detect-object-injection",
        "Check denom to prevent NaN if filtered files contain no statements",
        "nosemgrep: eslint.detect-object-injection",
        "Trigger change event on setup, to force filter on page refresh",
        "(filter value may still be present).",
        "Set up the click-to-sort columns.",
        "Look for a localStorage item containing previous sort settings:",
        "If we are in a page that has a column with id of \"region\", sort on",
        "it if the last sort was by function or class.",
        "Loaded on index.html",
        "-- pyfile stuff --",
        "If we're directed to a particular line number, highlight the line.",
        "nosemgrep: eslint.detect-object-injection",
        "Rebuild scroll markers when the window height changes.",
        "Return the nth line div.",
        "Set the selection.  b and e are line numbers.",
        "The first line selected.",
        "The next line not selected.",
        "Return a string indicating what kind of chunk this line belongs to,",
        "or null if not a chunk.",
        "Find the start of the next colored chunk.",
        "There's a next chunk, `probe` points to it.",
        "Find the end of this chunk.",
        "Find the end of the prev colored chunk.",
        "There's a prev chunk, `probe` points to its last line.",
        "Find the beginning of this chunk.",
        "Returns 0, 1, or 2: how many of the two ends of the selection are on",
        "the screen right now?",
        "The selection is entirely off the screen:",
        "Set the top line on the screen as selection.",
        "This will select the top-left of the viewport",
        "As this is most likely the span with the line number we take the parent",
        "The element is not a source line but the header or similar",
        "We extract the line number from the id",
        "The selection is entirely off the screen:",
        "Set the lowest line on the screen as selection.",
        "This will select the bottom-left of the viewport",
        "As this is most likely the span with the line number we take the parent",
        "The element is not a source line but the header or similar",
        "We extract the line number from the id",
        "Select line number lineno, or if it is in a colored chunk, select the",
        "entire chunk",
        "The line is in a highlighted chunk.",
        "Search backward for the first line.",
        "Search forward for the last line.",
        "Highlight the lines in the chunk",
        "Scroll the page if the chunk isn't fully visible.",
        "Init some variables",
        "Build html",
        "Don't build markers if the window has no scroll bar.",
        "If this solid missed block just make previous mark higher.",
        "Add colored line in scroll_marker block.",
        "Append last to prevent layout calculation",
        "jslint browser: true, sloppy: true, vars: true, plusplus: true, maxerr: 50, indent: 4",
        "global coverage: true, document, window, $"
      ],
      "docstring": null
    }
  ],
  "languages": [
    "python",
    "java",
    "javascript"
  ],
  "language_summaries": {
    "python": {
      "file_count": 14,
      "total_lines": 938,
      "total_size": 51968,
      "provider": "PythonProvider"
    },
    "java": {
      "file_count": 1,
      "total_lines": 217,
      "total_size": 11223,
      "provider": "JavaProvider"
    },
    "javascript": {
      "file_count": 1,
      "total_lines": 551,
      "total_size": 25474,
      "provider": "JavaScriptProvider"
    }
  },
  "project_info": {
    "source_path": "output/PythonExample/generated_code",
    "total_files": 16,
    "main_language": "python",
    "project_type": "python",
    "generation_time": 0.06020522117614746,
    "generator_version": "2.0.0",
    "supported_languages": [
      "python",
      "javascript",
      "typescript",
      "java",
      "csharp",
      "cpp"
    ],
    "project_analysis": {
      "total_files": 16,
      "languages": [
        "python",
        "java",
        "javascript"
      ],
      "main_language": "python",
      "architecture": "clean architecture",
      "files_by_language": {
        "python": 14,
        "java": 1,
        "javascript": 1
      },
      "lines_by_language": {
        "python": 1509,
        "java": 293,
        "javascript": 733
      },
      "project_type": "python"
    }
  }
}